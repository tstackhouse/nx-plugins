// These are important and needed before anything else
import 'reflect-metadata';
import * as compression from 'compression';
import * as express from 'express';
import { join, resolve } from 'path';
import { readFileSync, existsSync, lstatSync } from 'fs';
import { serveStatic } from './serve-static';
// Express serv
const DIST_FOLDER = __dirname;
export function app() {
  const server = express();
  server.use(compression());
  // server.use(capture());
  const options = {
    dotfiles: 'ignore',
    etag: false,
    extensions: ['htm', 'html'],
    index: ['index.html'],
    /** use a sensible setting for dev time. */
    maxAge: '1y',
    redirect: false,
    setHeaders(res, path, stat) {
      res.set('x-timestamp', Date.now());
    }
  };

  server.use(serveByFolderMiddleware);
  server.use(serveStatic(DIST_FOLDER, options));
  return server;
}

function serveByFolderMiddleware(req, res, next) {
  const pathName = req.path;
  let path: string;
  let root: string;
 
  root = join(resolve(DIST_FOLDER), 'browser');
  if (
    pathName.endsWith('/') ||
    pathName.endsWith('index.html') ||
    isDirectory(join(root, pathName))
  ) {
    if (pathName.endsWith('/')) {
      path = join(root, pathName, 'index.html');
    } else if (isDirectory(join(root, pathName))) {
      path = join(root, pathName, 'index.html');
    } else {
      path = join(root, pathName);
    }
    if (existFolder(path)) {
      const content = readFileSync(path, 'utf8').toString();
      res.set('Content-Type', 'text/html');
      return res.send(content);
    }
  }
  next();
}

export function existFolder(src) {
  try {
    return existsSync(src);
  } catch (e) {
    return false;
  }
}

export function isDirectory(src) {
  return existFolder(src) && lstatSync(src).isDirectory();
}


